name: CI/CD Pipeline

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

jobs:
  quality-checks:
    name: Quality Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting (Oxlint)
        run: npm run lint:oxlint

      - name: Run unit tests with coverage
        run: npm run test:unit:coverage

      - name: Check coverage threshold
        run: |
          # Extract services coverage from HTML report
          if [ -f coverage/lcov-report/index.html ]; then
            SERVICES_COVERAGE=$(grep -A 5 'movie-recommendation/src/services' coverage/lcov-report/index.html | grep -o '[0-9]*\.[0-9]*%' | head -1 | sed 's/%//')
            echo "Services coverage: ${SERVICES_COVERAGE}%"
            
            # Check if services coverage meets 50% threshold
            if awk "BEGIN {exit !($SERVICES_COVERAGE >= 50)}"; then
              echo "✅ Services coverage ${SERVICES_COVERAGE}% meets the 50% threshold"
            else
              echo "❌ Services coverage ${SERVICES_COVERAGE}% is below the 50% threshold"
              exit 1
            fi
          else
            echo "❌ Coverage report not found"
            exit 1
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: coverage/

      - name: Build project (includes type checking)
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: dist-files
          path: dist/

  deploy-to-pages:
    name: Deploy to GitHub Pages
    needs: quality-checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project for GitHub Pages
        run: npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4